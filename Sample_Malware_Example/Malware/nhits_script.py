import sys
import torch
import pytorch_forecasting as pf
import matplotlib.pyplot as plt
from torch import nn
from matplotlib.backends.backend_pdf import PdfPages
from sklearn.metrics import (
    mean_absolute_error,
    root_mean_squared_error,
    mean_absolute_percentage_error,
)
import pandas as pd
from ForecastingModel.predict import predict
import numpy as np

if __name__ == "__main__":
    if len(sys.argv) < 0:
        print("No Recording Given.....")
    else:
        if len(sys.argv) > 2:
            output_path = sys.argv[2]
        else:
            output_path = "."
        # recording = sys.argv[1]
        recording = (
            r"C:\Users\annal\TarAdvGAN_v3\TargetedAdvGAN\SP500_AttackData_Full\AOS.csv"
        )
        output_path = "MalwareScriptOutputs"
        model_state_dict = torch.load(
            "Malware/ForecastingModel/NHITS_forecasting_model.pt"
        )
        params = torch.load(
            "Malware/ForecastingModel/NHITS_params.pt", weights_only=False
        )
        params["loss"] = pf.QuantileLoss(
            quantiles=[0.001, 0.01, 0.05, 0.5, 0.95, 0.99, 0.999]
        )
        model = pf.NHiTS(**params)
        model.load_state_dict(model_state_dict)
        model.eval()

        predictions, ticker, adjprc = predict(model, recording)
        lookback_length = model.hparams["context_length"]
        predictions = predictions.numpy()
        adjprc = adjprc.numpy()

        # Calculate the errors
        mae = mean_absolute_error(adjprc[lookback_length:], predictions)
        rmse = root_mean_squared_error(adjprc[lookback_length:], predictions)
        mape = mean_absolute_percentage_error(adjprc[lookback_length:], predictions)

        index = np.arange(lookback_length, len(predictions) + lookback_length)

        fig = plt.figure(figsize=(14, 6))
        plt.plot(index, adjprc[lookback_length:], label="Actual", color="blue")
        plt.plot(index, predictions, label="Predicted", color="orange")
        plt.title(f"Predicted vs Actual for stock {ticker[0]} (all), MAE: {mae}")
        plt.legend()
        plt.xlabel("Day")
        plt.ylabel("adjprc")
        plt.savefig(f"{output_path}/forecast_plot_{ticker[0]}_malware.png")
        plt.close()

        with open(f"{output_path}/metrics_{ticker[0]}_malware.txt", "w") as file:
            file.write(f"MAE: {mae}\n")
            file.write(f"RMSE: {rmse}\n")
            file.write(f"MAPE: {mape}\n ")

        df = pd.DataFrame(
            np.concat(
                [adjprc[lookback_length:].reshape(-1, 1), predictions.reshape(-1, 1)],
                axis=-1,
            ),
            columns=[["adjprc", "pred"]],
        )
        df.to_csv(f"{output_path}/{ticker[0]}.csv")
